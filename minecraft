#!/bin/bash
# /etc/init.d/minecraft
# version 0.4.2 2016-02-09 (YYYY-MM-DD)
#
### BEGIN INIT INFO
# Provides:   minecraft
# Required-Start: $local_fs $remote_fs screen-cleanup
# Required-Stop:  $local_fs $remote_fs
# Should-Start:   $network
# Should-Stop:    $network
# Default-Start:  2 3 4 5
# Default-Stop:   0 1 6
# Short-Description:    Minecraft server
# Description:    Starts the minecraft bedrock server
### END INIT INFO

#Settings
SERVICE='bedrock_server'
SCREENNAME='mc'
SCREENNAME2='inotify'
USERNAME='mc'
WORLD='survival'
MCPATH='/home/mc/minecraft'
BACKUPPATH='/home/mc/minecraft/worlds.backup'
INVOCATION="LD_LIBRARY_PATH=. ./bedrock_server 2>&1 | tee logs/latest.log"
INVOCATION2="inotify ~mc/minecraft/logs/latest.log"

ME=`whoami`
as_user() {
  if [ "$ME" = "$USERNAME" ] ; then
    bash -c "$1"
  else
    su - "$USERNAME" -c "$1"
  fi
}

mc_start() {
  if  pgrep -u $USERNAME -f $SERVICE > /dev/null ; then
    echo "$SERVICE is already running!"
  else
    echo "Starting $SERVICE..."
    cd $MCPATH
    rm -f "$MCPATH/logs/empty_"*
    touch logs/empty_`date "+%Y-%m-%d_%H%M%S"`.log
    as_user "cd $MCPATH && screen -dmS ${SCREENNAME} /bin/bash -c \"$INVOCATION\""
#    as_user "screen -dmS ${SCREENNAME2} /bin/bash -c \"$INVOCATION2\""
    sleep 7
    if pgrep -u $USERNAME -f $SERVICE > /dev/null ; then
      echo "$SERVICE is now running."
    else
      echo "Error! Could not start $SERVICE!"
    fi
  fi
}

mc_stop() {
  if pgrep -u $USERNAME -f $SERVICE > /dev/null ; then
    echo "Stopping $SERVICE"
    as_user "screen -p 0 -S ${SCREENNAME} -X eval 'stuff \"say SERVER SHUTTING DOWN IN 10 SECONDS...\"\015'"
    sleep 5
    as_user "screen -p 0 -S ${SCREENNAME} -X eval 'stuff \"say SERVER SHUTTING DOWN IN 5 SECONDS...\"\015'"
    sleep 2
    as_user "screen -p 0 -S ${SCREENNAME} -X eval 'stuff \"say SERVER SHUTTING DOWN IN 3 SECONDS...\"\015'"
    sleep 1
    as_user "screen -p 0 -S ${SCREENNAME} -X eval 'stuff \"say SERVER SHUTTING DOWN IN 2 SECONDS...\"\015'"
    sleep 1
    as_user "screen -p 0 -S ${SCREENNAME} -X eval 'stuff \"say SERVER SHUTTING DOWN IN 1 SECONDS...\"\015'"
    sleep 1
    as_user "screen -p 0 -S ${SCREENNAME} -X eval 'stuff \"say stop...\"\015'"
    as_user "screen -p 0 -S ${SCREENNAME} -X eval 'stuff \"stop\"\015'"
    sleep 6
#    as_user "screen -S ${SCREENNAME2} -X quit"
    mc_log
#    as_user "screen -S ${SCREENNAME} -X quit"
  else
    echo "$SERVICE was not running."
  fi

  if pgrep -u $USERNAME -f $SERVICE > /dev/null ; then
    echo "Error! $SERVICE could not be stopped. Close screen manually."
    as_user "screen -S ${SCREENNAME} -X quit"
    sleep 2
#    rm -f "$MCPATH/logs/empty_"*
  else
    echo "$SERVICE is stopped."
  fi
}

mc_log() {
    cd $MCPATH
    EMPTYFILE=`ls logs/empty*`
    EMPTYFILE=${EMPTYFILE/#logs\/empty_/}
    mv -f "logs/latest.log" "logs/$EMPTYFILE"
    ln -sf "$EMPTYFILE" "logs/previous.log"
    rm -f "$MCPATH/logs/empty_"*
}

mc_backup() {
    NOW=`date "+%y%m%d_%H%M%S"`
    BACKUP_FILE="$BACKUPPATH/${WORLD}_${NOW}.mcworld"
    echo "Backing up minecraft world..."
    cd $MCPATH/worlds/survival-1
    zip -rq $BACKUP_FILE *
 
#    echo "Removing backup older than 3 days..."
#    as_user "find $BACKUPPATH -maxdepth 1 -name '*\.mcworld' -type f -mtime +2 -exec rm -vf '{}' \;"

    echo "Removing all backups except for the latest three files..."
    ReservedNum=3
    FileNum=$(ls -l $BACKUPPATH | grep ^- | wc -l)
    while (( $FileNum > $ReservedNum )); do
        OldFile=$(ls -rt $BACKUPPATH | head -1)
        /bin/rm -vf $BACKUPPATH/$OldFile
        (( FileNum=FileNum-1 ))
    done
    echo "Done."
}

mc_cloudbak() {
    cd $BACKUPPATH
    BACKUPFILE=`ls -t *mcworld | head -1`
    fdate="${BACKUPFILE:9:6}"   # the date of the latest backup file
    now=$(date "+%y%m%d")

    if (((now-fdate)<9)); then
        /usr/local/bin/dav $BACKUPFILE
    fi
}

mc_command() {
  command="$1";
  if pgrep -u $USERNAME -f $SERVICE > /dev/null ; then
    pre_log_len=`wc -l "$MCPATH/logs/latest.log" | awk '{print $1}'`
    echo "$command"
    as_user "screen -p 0 -S ${SCREENNAME} -X eval 'stuff \"$command\"\015'"
    sleep .6 # assumes that the command will run and print to the log file in less than 0.6 seconds
    # print output
    tail -n $((`wc -l "$MCPATH/logs/latest.log" | awk '{print $1}'`-$pre_log_len)) "$MCPATH/logs/latest.log"
  fi
}

 
#Start-Stop here
case "$1" in
  start)
    mc_start
    ;;
  stop)
    mc_stop
    ;;
  restart)
    mc_stop
    mc_start
    ;;
  backup)
    mc_backup
    ;;
  sbackup)
    mc_stop
    player_num=`cat $MCPATH/logs/previous.log | grep Player | wc -l`
    if (( $player_num != 0 )); then
      mc_backup
    fi
    mc_start
    ;;
  cloudbak)
    mc_cloudbak
    ;;
  status)
    if pgrep -u $USERNAME -f $SERVICE > /dev/null ; then
      echo "$SERVICE is running."
    else
      echo "$SERVICE is not running."
    fi
    ;;
  command)
    if [ $# -gt 1 ] ; then
      shift
      mc_command "$*"
    else
      echo "Must specify server command (try 'help'?)"
    fi
    ;;

  *)
    echo "Usage: $0 {start|stop|backup|sbackup|cloudbak|status|restart|command \"server command\"}"
    exit 1
    ;;
esac

exit 0
